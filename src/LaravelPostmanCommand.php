<?php

namespace JimenezMaximiliano\LaravelPostman;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Route;

class LaravelPostmanCommand extends Command
{
    protected $helper;
    
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'laravelPostman:export';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Exports Laravel API routes to a JSON file usign '
            . 'Postman import format';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct(Helper $helper)
    {
        $this->helper = $helper;
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        $collectionName = $this->getCollectionName();
        $collectionDescription = $this->getCollectionDescription();
        $collection = $this->helper->getCollectionStructure(
                $collectionName, 
                $collectionDescription);
        
        foreach ($this->getRoutes() as $folderName => $folderRoutes) {
            
            $items = [];
            foreach ($folderRoutes as $route) {

                $items = array_merge($this->getRouteItems($route), $items);
            }
            
            $collection['item'][] = [
                'name' => $folderName,
                'description' => '',
                'item' => $items,
            ];
        }
        
        file_put_contents(
                $this->helper->getExportDirectory() . 'postman.json', 
                json_encode($collection));
    }
    
    protected function getRouteItems($route)
    {
        $baseURL = $this->helper->getBaseURL();
        $path = $this->helper->replaceGetParameters($route->getPath());
        $routeName = !empty($route->getName()) ? $route->getName() : $path;
        $methods = $route->getMethods();
        $items = [];
        
        foreach ($methods as $method) {

            if ($method === 'HEAD' && config('laravelPostman.skipHEAD', true)) {
                continue;
            }
            $body = $this->getBody($route, $method);
            $items[] = [
                'name' => $routeName,
                'request' => [
                    'url' => $baseURL . $path,
                    'method' => $method,
                    'body' => $body,
                ],
                'response' => [],
            ];
        }
        
        return $items;
    }
    
    protected function getCollectionName()
    {
        $configCollectionName = config('laravelPostman.collectionName');
        
        if (!empty($configCollectionName)) {
            
            return $configCollectionName;
        }
        
        return $this->ask('Enter collection name', 'LaravelPostman Collection');
    }
    
    protected function getCollectionDescription()
    {
        $configCollectionDescription = config('laravelPostman.collectionDescription');
        
        if (!empty($configCollectionDescription)) {
            
            return $configCollectionDescription;
        }
        
        return $this->ask('Enter collection description', 
                'Postman collection generated by LaravelPostman');
    }
    
    protected function getRoutes()
    {
        $resultRoutes = [];
        $apiPrefix = $this->helper->getApiPrefix();
        $apiPrefixLength = strlen($apiPrefix);
        
        foreach (Route::getRoutes() as $route) {
            
            $path = $route->getPath();
            if (substr($path, 0, $apiPrefixLength) !== $apiPrefix) {
                $this->warn('Omiting ' . $path);
                
                continue;
            }
            
            $routeFolder = $this->helper->getRouteFolder($route);
            if (!isset($resultRoutes[$routeFolder])) {
                $resultRoutes[$routeFolder] = [];
            }
            
            $resultRoutes[$routeFolder][] = $route;
        }
        
        return $resultRoutes;
    }
    
    protected function getBody($route, $method) {
        
        $postmanParams = $this->getRouteParams($route, $method);
        
        if (empty($postmanParams)) {
            return [];
        }
        
        $body['mode'] = 'formdata';
        $body['formdata'] = [];
        foreach ($postmanParams as $param) {
            $body['formdata'][] = [
                'key' => $param,
                'value' => '',
                'enabled' => true,
            ];
        }
        
        return $body;
    }
    
    protected function getRouteParams($route, $method)
    {
        if ($method === 'GET' || $method === 'DELETE') {
            return [];
        }
        
        if (!is_object($route->getController())
                || !property_exists($route->getController(), 'postmanModel')) {

            return [];
        }
        
        $postmanModelClass = $route->getController()->postmanModel;
        
        $postmanModel = new $postmanModelClass();
        
        if (!is_object($postmanModel) 
                || !method_exists($postmanModel, 'getPostmanParams')) {
            
            return [];
        }
        
        return $postmanModel->getPostmanParams();
    }
}
